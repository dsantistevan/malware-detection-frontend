import { Component, OnInit } from '@angular/core';
import { NgxSpinnerService } from 'ngx-spinner';
import { MalwareDetectionService } from '../malware-detection.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  selectedFile: any;
  file_error=false;
  uploaded=false;
  procesos : any = [];
  all_back=0;

  //1 malware, 0 goodware
  constructor(private malwareService: MalwareDetectionService, private spinnerService: NgxSpinnerService) { }

  ngOnInit(): void {
  }
  extract(lista: Array<any>){
    let nuevaLista: any[] = [];
    let ind = -1
    for(let i in lista){
      if(nuevaLista.length==0 || nuevaLista[ind]!=lista[i]){
        nuevaLista.push(lista[i])
        ind+=1
      }
          
      if(nuevaLista.length==100){
        this.file_error=false;
        return nuevaLista
      }
    }
    return nuevaLista  
  }
  
  onFileChanged(event: any) {
    this.all_back=0;
    var clone = event.target.cloneNode();
    var parent = event.target.parentNode;
    parent.textContent = event.target.files.item(0).name;
    clone.addEventListener('input',  (event : any) => { this.onFileChanged(event)});
    parent.appendChild(clone)
    
    this.selectedFile = event.target.files[0];
    this.spinnerService.show()
    this.file_error=true;
    const fileReader = new FileReader();
    try {
      fileReader.readAsText(this.selectedFile, "UTF-8");  
    } catch (error) {
      this.spinnerService.hide()
    }
    
    let payload: any= {}
    fileReader.onload = () => {
      this.procesos= [];
      
      try {
        const content= JSON.parse(<string>fileReader.result);
        console.log(content);
        var cont = 0
        payload['processes'] = [];
        for(let i of content['behavior']['processes']){
          var obj : any = {}
          obj['name'] = i['process_name']
          let a = [];
          for(let j of i['calls']){
            a.push(j['api'])
          }
          obj['api_calls'] = this.extract(a)
          console.log("Proceso "+cont+": ")
          console.log(obj['api_calls']);
          cont++;
          if(obj['api_calls'].length >99){
            obj['api_calls'] = obj['api_calls'].join(" ")
            payload['processes'].push(obj)
            this.procesos.push({name: obj['name']});
          }
          
        }  
      } catch (error) {
        this.spinnerService.hide()
      }
      
      this.uploaded=true;
      console.log(payload);
      if(this.uploaded && !this.file_error){
        this.malwareService.predictGRU(payload).subscribe(
          data =>{
            console.log("GRU: "+(<any>data)['predictions']);
            for(let i in this.procesos){
              this.procesos[i]['gru'] = (<any>data)['predictions'][i]
            }
            this.spinnerService.hide()
            this.all_back++
          }
        )
        this.malwareService.predictTransformer(payload).subscribe(
          data =>{
            console.log("Transformer: "+(<any>data)['predictions']);
            for(let i in this.procesos){
              this.procesos[i]['transformer'] = (<any>data)['predictions'][i]
            }
            this.spinnerService.hide()
            this.all_back++
          }
        )

        this.malwareService.predictLSTM(payload).subscribe(
          data =>{
            console.log("LSTM: "+(<any>data)['predictions']);
            console.log(this.selectedFile)
            for(let i in this.procesos){
              this.procesos[i]['lstm'] = (<any>data)['predictions'][i]
            }
            this.spinnerService.hide()
            this.all_back++
          }
        )
      }else{
        this.spinnerService.hide()
      }
    }
    
    fileReader.onerror = (error) => {
      console.log(error);
    }  
    
    
  }
}
